// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20251005083829_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.CommuneWard", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("Name");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("commune_ward");
                });

            modelBuilder.Entity("Repository.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<long>("ProductUnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_unit_id");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Repository.ProductBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_batch");
                });

            modelBuilder.Entity("Repository.ProductUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("product_unit");
                });

            modelBuilder.Entity("Repository.ProvinceCity", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Code");

                    b.HasIndex("Name");

                    b.ToTable("province_city");
                });

            modelBuilder.Entity("Repository.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(55)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role");
                });

            modelBuilder.Entity("Repository.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Repository.Admin", b =>
                {
                    b.HasBaseType("Repository.User");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Repository.Seller", b =>
                {
                    b.HasBaseType("Repository.User");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cid");

                    b.Property<string>("CommuneWardCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("commune_ward_code");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("SpecificAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("specific_address");

                    b.HasIndex("CommuneWardCode");

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("Repository.CommuneWard", b =>
                {
                    b.HasOne("Repository.ProvinceCity", "ProvinceCity")
                        .WithMany("CommuneWards")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProvinceCity");
                });

            modelBuilder.Entity("Repository.Product", b =>
                {
                    b.HasOne("Repository.ProductUnit", "ProductUnit")
                        .WithMany("Products")
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("Repository.ProductBatch", b =>
                {
                    b.HasOne("Repository.Product", "Product")
                        .WithMany("ProductBatches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.User", b =>
                {
                    b.HasOne("Repository.Role", "Role")
                        .WithOne("User")
                        .HasForeignKey("Repository.User", "RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Admin", b =>
                {
                    b.HasOne("Repository.User", null)
                        .WithOne()
                        .HasForeignKey("Repository.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Seller", b =>
                {
                    b.HasOne("Repository.CommuneWard", "CommuneWard")
                        .WithMany()
                        .HasForeignKey("CommuneWardCode")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Repository.User", null)
                        .WithOne()
                        .HasForeignKey("Repository.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommuneWard");
                });

            modelBuilder.Entity("Repository.Product", b =>
                {
                    b.Navigation("ProductBatches");
                });

            modelBuilder.Entity("Repository.ProductUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repository.ProvinceCity", b =>
                {
                    b.Navigation("CommuneWards");
                });

            modelBuilder.Entity("Repository.Role", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
